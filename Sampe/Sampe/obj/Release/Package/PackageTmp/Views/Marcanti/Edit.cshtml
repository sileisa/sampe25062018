@model Sampe.Models.Marcanti

@{
    ViewBag.Title = "Editar";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!-- Adicionando JQuery -->
<script src="https://code.jquery.com/jquery-3.2.1.min.js"
        integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
        crossorigin="anonymous"></script>
<!-- Adicionando Javascript -->
<script type="text/javascript">

    $(document).ready(function () {

        function limpa_formulário_cep() {
            // Limpa valores do formulário de cep.
            $("#Rua").val("");
            $("#Bairro").val("");
            $("#Cidade").val("");
            $("#Uf").val("");

        }

        //Quando o campo cep perde o foco.
        $("#Cep").blur(function () {

            //Nova variável "cep" somente com dígitos.
            var cep = $(this).val().replace(/\D/g, '');

            //Verifica se campo cep possui valor informado.
            if (cep != "") {

                //Expressão regular para validar o CEP.
                var validacep = /^[0-9]{8}$/;

                //Valida o formato do CEP.
                if (validacep.test(cep)) {

                    //Preenche os campos com "..." enquanto consulta webservice.
                    $("#Rua").val("...");
                    $("#Bairro").val("...");
                    $("#Cidade").val("...");
                    $("#Uf").val("...");


                    //Consulta o webservice viacep.com.br/
                    $.getJSON("https://viacep.com.br/ws/" + cep + "/json/?callback=?", function (dados) {

                        if (!("erro" in dados)) {
                            //Atualiza os campos com os valores da consulta.
                            $("#Rua").val(dados.logradouro);
                            $("#Bairro").val(dados.bairro);
                            $("#Cidade").val(dados.localidade);
                            $("#Uf").val(dados.uf);

                        } //end if.
                        else {
                            //CEP pesquisado não foi encontrado.
                            limpa_formulário_cep();
                            alert("CEP não encontrado.");
                        }
                    });
                } //end if.
                else {
                    //cep é inválido.
                    limpa_formulário_cep();
                    alert("Formato de CEP inválido.");
                }
            } //end if.
            else {
                //cep sem valor, limpa formulário.
                limpa_formulário_cep();
            }
        });
    });

</script>
<h2>Editar dados da Marcanti</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
		<ol class="breadcrumb">
			<li><a href="/Home/Index">Home</a></li>
			<li><a href="/Home/Cadastros">Cadastros</a></li>
			<li><a href="/Marcanti/Index">Dados da Marcanti</a></li>
			<li class="active">Editar</li>
		</ol>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.MarcantiId)

        <div class="container ">
            <div class="col-xs-12 col-sm-12 col-md-6">
                <h4>Dados da Marcanti</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group row ">
                    <label class="control-label col-xs-12 col-sm-12 col-md-4" for="NomeEmpresa">Nome</label>
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.NomeEmpresa, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        <p style="color:red;">@ViewBag.Error</p>
                        @Html.ValidationMessageFor(model => model.NomeEmpresa, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Email, "E-mail", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Telefone, "Telefone", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Cnpj, "CNPJ", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Cnpj, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Cnpj, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Cep, "CEP", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Cep, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Cep, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Rua, "Rua", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Rua, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Rua, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Numero, "Número", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Numero, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Numero, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Complemento, "Complemento", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Complemento, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Complemento, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Bairro, "Bairro", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Cidade, "Cidade", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Cidade, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Cidade, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row ">
                    @Html.LabelFor(model => model.Uf, "Estado", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-xs-12 col-sm-12 col-md-6">
                        @Html.EditorFor(model => model.Uf, new { htmlAttributes = new { @class = "form-control col-md-4" } })
                        @Html.ValidationMessageFor(model => model.Uf, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <br />
                        <input type="submit" value="Salvar" class="btn btn-success" />
                    </div>
                </div>
            </div>
        </div>
    </div>
}



